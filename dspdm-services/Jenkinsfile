pipeline {

  environment {
    PROJECT = "osdu-upstream"
    APP_NAME = "gceme"
    FE_SVC_NAME = "${APP_NAME}-frontend"
    CLUSTER = "cluster-1"
    CLUSTER_ZONE = "asia-south1-a"
    IMAGE_TAG = "gcr.io/${PROJECT}/${APP_NAME}:${env.BUILD_NUMBER}"
    JENKINS_CRED = "${PROJECT}"
    BRANCH_NAME = "production"
  }

  agent {
    kubernetes {
      label 'dspdm-services'
      defaultContainer 'jnlp'
      yaml """
apiVersion: v1
kind: Pod
metadata:
labels:
  component: ci
spec:
  # Use service account that can deploy to all namespaces
  serviceAccountName: cd-jenkins
  containers:
  - name: maven
    image: maven:3.8.6-jdk-11
    command:
    - cat
    tty: true
  - name: gcloud
    image: gcr.io/cloud-builders/gcloud
    command:
    - cat
    tty: true
  - name: kubectl
    image: gcr.io/cloud-builders/kubectl
    command:
    - cat
    tty: true
"""
}
  }
  stages {
    stage('Build') {
      steps {
        container('maven') {
          sh """
            ln -s `pwd`/dspdm-services /java/src/dspdm-services
            echo "list outer folder"
            ls . -l 
            cd /java/src/dspdm-services
            mvn clean package 
            ls . -l
          """
        }
      }
    }
    stage('Build and push image with Container Builder') {
	    steps {
		    container('gcloud') {
			    withCredentials([file(credentialsId: 'jenkins-sa', variable: 'GC_KEY')]) {
				    sh("gcloud auth activate-service-account --key-file=${GC_KEY}")
		                    sh("gcloud container clusters get-credentials cluster-1 --zone asia-south1-a --project ${PROJECT}")
			            sh """
				       ls . -l
				       cd dspdm-services
				       PYTHONUNBUFFERED=1 gcloud builds submit -t ${IMAGE_TAG} . 
			            """

			    }
		    }
	    }
    }
    stage('Deploy Canary') {
      // Canary branch
      when { branch 'canary' }
      steps {
        container('kubectl') {
          // Change deployed image in canary to the one we just built
          sh("sed -i.bak 's#gcr.io/cloud-solutions-images/gceme:1.0.0#${IMAGE_TAG}#' dspdm-services/k8s/canary/*.yaml")
          step([$class: 'KubernetesEngineBuilder', namespace:'production', projectId: env.PROJECT, clusterName: env.CLUSTER, zone: env.CLUSTER_ZONE, manifestPattern: 'k8s/services', credentialsId: env.JENKINS_CRED, verifyDeployments: false])
          step([$class: 'KubernetesEngineBuilder', namespace:'production', projectId: env.PROJECT, clusterName: env.CLUSTER, zone: env.CLUSTER_ZONE, manifestPattern: 'k8s/canary', credentialsId: env.JENKINS_CRED, verifyDeployments: true])
          sh("echo http://`kubectl --namespace=production get service/${FE_SVC_NAME} -o jsonpath='{.status.loadBalancer.ingress[0].ip}'` > ${FE_SVC_NAME}")
        }
      }
    }
    stage('Deploy Production') {
      // Production branch
      steps{
        container('kubectl') {
        // Change deployed image in canary to the one we just built
          sh("sed -i.bak 's#gcr.io/cloud-solutions-images/gceme:1.0.0#${IMAGE_TAG}#' dspdm-services/k8s/production/*.yaml")
          sh("cat dspdm-services/k8s/production/*.yaml")
        }
      }
    }
    stage('Deploy Dev') {
      // Developer Branches
      when {
        not { branch 'main' }
        not { branch 'master' }
        not { branch 'canary' }
      }
      steps {
        container('kubectl') {
          // Create namespace if it doesn't exist
          sh("kubectl get ns ${env.BRANCH_NAME} || kubectl create ns ${env.BRANCH_NAME}")
          // Don't use public load balancing for development branches
          sh "kubectl apply -f ./dspdm-services/k8s/production/backend-production.yaml -n production"
            
        }
      }
    }
  }
}

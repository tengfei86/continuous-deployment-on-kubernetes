# Default values for phoenixmsp.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global variable defined in a parent chart can be used by both parent and subcharts.
# so these variabes can be defined once in parent chart values.yaml and can be used by also subcharts
# Change the cluster hosts to be DNS for cluster. 
# For Web application, uncomment the global variable 'app_type'
global:
  cluster:
    hosts: 
# If the current environment (cluster/namespace) specific to production, 'production' value should be 'true', otherwise it should be false.
# Another way to set is via helm cli.helm install --set global.env.production=<true/false> 
  env:
    production: true
# Cloud vendor [aws, azure]
  cloud:
    vendor: aws
# By default the variable app_type'is 'app'. For Web application the variable 'app_type' is 'web-app'.
# More than one value can be passed as comma separted values to app_type. ex: app_type: "wep-app,release-1.0,other"
app_type: "app"

# Pod Replication Count
replicaCount: 1

# Setup docker image for the application.Another way to set is via helm cli.helm install --set image.repository=<>,image.tag=<>
image:
  repository: distplat-docker-milestone.hub.ienergycloud.io/distarch/dspdm.msp.mainservice
  tag: 1.0-SNAPSHOT
  pullPolicy: Always

# setup schema docker image of your web application. This will used to execute helm hooks while deploying a webapp
# Remove {} and Uncomment below lines if your application is a web-app and provide schema image name
schema_image: {}
#  repository: 
#  tag: 
#  pullPolicy: Always

#nameOverride:

# fullnameOverride is to assign a name to each kuberneets resource of your application. 
# If 'global.env.production' is 'true', this value will be used as name for resources
# If 'global.env.production' is 'true' and no value provide for this, resources name will be like <release_name>-<chart.name>
# If 'global.env.production' is false and even if you set/unset this value, resources name will be <release_name>-<chart.name>
# 'global.env.production' should be true only if you are using production cluster or namespace
fullnameOverride: mainservice

# set container port(s) if it is different from 8080
service:
  type: ClusterIP
  ports:
    - port: 80
      containerPort: 8080
      name: http
      protocol: TCP
  
  # To add annotations, remove {}, provide key value pairs as below sample.
  # For Web appliation, uncomment and update the below annotations( under Web annotations) required to register this application as a product to iEnergy admin Dashboard
  # product_category - used as filter to help user categorize their products. Example: 1.Dashboards @.Geology. Multiplae category values can be provide as "Dashboards, Geology"
  # product_description - A Description will be added to the product
  # product_display_name - This name will be displayed in the product item
  # product_icon - path of an icon in the application container, which will be used in the product item in the dashboard
  # product_type - its the type of the applciation. The values are "0" - Web, "1" - 2D, "2" - 3D
  # registerToAllUsers - To add product to all users. The values are true/false
  annotations: {}
#     sample_annotation_key: "Sample Value"  
# Web annotations
#     product_category: "Dashboards, Geology"
#     product_description: "Development portal for the Phoenix developers."
#     product_display_name: "Dev Portal"
#     product_icon: "dev.png"
#     product_type: "0"
#     registerToAllUsers: false

# To add labels to a service, remove {}, provide key values pairs as sample below. Uncomment belowkey value pair and modify/add more key value pairs.
  labels: {}
#    newlabel: newvalue


# To provide more env variables whose values can be overriden by --set of helm command, Uncomment required nodes and remove {} after extraenv
extraEnv:
  MSDP_JAVA_OPTIONS: '-Xms2048m -Xmx2048m'
#  key2: value2

# To provide more env variables, Uncomment required nodes and remove {} after env
env: {}
#  - name: first
#    value: firstvalue
# Uncomment below values, if you are deploying a webapp        
#  - name: WF_ADMIN_USER
#    valueFrom:
#      secretKeyRef:
#        name: wfadminapp-secret
#        key: wfusername
#  - name: WF_ADMIN_PASSWORD
#    valueFrom:
#      secretKeyRef:
#        name: wfadminapp-secret
#        key: wfpassword    

# To refer a secret key value which was already available outside this deployment.
# Uncomment below lines and specify the required sceret name and key inside the secret that you want to refer.
#  - name: USER_NAME
#    valueFrom:
#      secretKeyRef: 
#        name: secretname
#        key: key1
# To refer a configmap key value which was already available outside this deployment.
# Uncomment below lines and specify the required configmap name and key inside the configmap that you want to refer.
#  - name: KEY
#    valueFrom:
#      configmapRef: 
#        name: configmapname
#        key: key1

# Must provide the readiness/liveness paths implemented in your application.
# If your appltcaion didnot implement such or your's is a web application, use just / as the path for liveness/readiness
livenessProbe: 
  httpGet:
    path: /msp/home/health
    port: 8080
    scheme: HTTP
  initialDelaySeconds: 60
readinessProbe:
  httpGet:
    path: /msp/home/readiness
    port: 8080
    scheme: HTTP
  initialDelaySeconds: 10
     
# To create configmap resource for deployment.   
configmap:
# provide data (key value pairs) to configmap, uncomment 'configmapfromliteral' template in your service.yaml, 
# uncomment below lines, remove {} after env and provide key value pairs as below sample.
# Uncomment 'name' only if you want to refer an existing configmap from literal and then comment 'data' and its child keys.
  env: {}
#    data:  
#      HelloConfigMap: newvalue
#      anotherkey: anothervalue
#    name:

# Copy your configuration files to '/config' folder of this chart,
# uncomment 'configmapfromfile' template in your service.yaml and 
# uncomment below lines, remove {} after file and should provide path and mouthpath values.
# Uncomment 'name' only if you want to refer an existing configmap from file and then comment 'path'.
# Provide subpath if the file should not remove other files in the mountpath
  file: {} 
#    path: config/*
#    mountpath: /javarun/config
#    subpath: keycloak.json
#    name:
# For Web application
#    isauth: true

# Uncomment 'name' only if you want to refer an existing configmap from file
#    name: cm-commonservice-config 
# To create secret resource for deployment.  
secret:
# To provide data (key value pairs) to secret, uncomment 'secretfromliteral' template in your service.yaml,
# uncomment below lines, remove {}  after env and provide key value pairs as below sample.
# Set up `type` parameter as `dynamic` if you want to use dynamically provisioned PV by PVC, 
# or `static`, if you want to use shared network file system implementation (AzureFile for Azure or EFS for AWS)
# For AWS implementation you may also set up `nfspoint` path to the mounted nfs storage folder (works only with `type: dynamic`)
# and overwrite the `nfsserver` name (if those parameters do not provided, the default values will be used for AWS EFS storage)
# Uncomment 'name' only if you want to refer an existing secret from literal and then comment 'data' and its child keys.
  env: {}
#    data:  
#      USER_NAME: user
#      PASSWORD: password
#    name:

# To provide data (config files) to secret, Copy your secret files to '/secrets' folder of this chart, 
# uncomment 'secretfromfile' template in your service.yaml, 
# uncomment below lines, remove {} after file and should provide path and mouthpath values.
# Uncomment 'name' only if you want to refer an existing secret from file and then comment 'path'.
  file: {}
#    path: secrets/*
#    mountpath: /javarun/secret
#    name:
          
# To Create blockstorage pv claim for deployment, uncomment 'blockstorageclaim' template in your service.yaml,
# uncomment below lines, remove {} after blockstorage and should provide storage & mountpath values.
blockStorage: {}
#  storage: 5Mi
#  mountpath: /tmp/blockstorage

# To Create/provide filestorage pv claim to deployment, uncomment filestorageclaim' template in your service.yaml,
# uncomment below lines, remove {} after filestorage and should provide storage & mountpath values.
# Set up `type` parameter as `dynamic` if you want to use dynamically provisioned PV by PVC, 
# or `static`, if you want to use shared network file system implementation (AzureFile for Azure or EFS for AWS)
# For AWS implementation you may also set up `nfspoint` path to the mounted nfs storage folder (works only with `type: dynamic`)
# and overwrite the `nfsserver` name (if those parameters do not provided, the default values will be used for AWS EFS storage)
# Uncomment 'name' only if you want to refer an existing filestorage pvc and then comment other keys except 'mountpath'
fileStorage: {}
#  storage: 5Mi
#  mountpath: /tmp/filestorage
#  name:
#  type: dynamic
#  nfspoint: /
#  nfsserver: 

# add resource limits in the following section.
# These resouce limits to be used in deployment section.  
resources:
# Uncomment the following config to specify resources.Remove curly braces after 'resources
  limits:
    cpu: 150m
    memory: 2048Mi
#  requests:
#    cpu: 100m
#    memory: 128Mi

# To add any additional routes, Remove curly braces after 'routes and provide the additional routes with uri and host for each route like the sample below
routes: {}
#  serviceregistry:
#    uri: /serviceregistry
#    host: routerservice.wf-system.svc.cluster.local
# Prefix is optional. uncomment and provide value only when prefix and url values of an application are different.  
#    prefix: /    

# To add any additional http rules, Remove curly braces after 'extraHttpRules' and provide the additional rules like timeout, reties, headers etc in  yaml format.
extraHttpRules: {}
#  headers:
#   request:
#     set:
#       x-forwarded-proto : https

# To provide metrics path, remove {} after servicemonitor, uncomment 'servicemonitor' template in your service.yaml,
# Uncomment below nodes and provide metrics endpoint of your service
# To use this, your application should implement a metrics endpoint
servicemonitor: {}
#  endpoints:
#    - port: http
#      interval: 10s
#      path: /msp/home/metrics

# To enable WebSocket upgrade, change the below value to true
websocketUpgrade: false

# Declaring the sricpt to be executed at the start of container. 
#command: "[\"/bin/sh\", \"& /jacoco-0.8.7/getcodecoverage.sh\"]"
# To pass command line args
#args: "[\"arg1\",\"arg2\"]" 

# For web application if keycloak configuration has to be added, uncomment 'isauth' variable and provide values for realm and resource(client_id).
# Enable these values if your application is web-app
keycloak: {}
#  realm: "DecisionSpace_Integration_Server"
# keycloak client id  
#  resource:

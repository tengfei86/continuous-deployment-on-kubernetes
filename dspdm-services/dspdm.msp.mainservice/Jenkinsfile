
/*---------PRE-REQUISITES to setup CI/CD for msp service--------------
*1. Need to raise a support request to get access to dist-services docker repository
*2. Upon receiving access, Go to your project's jenkins site, -> Manage Jenkins -> Managed Files-> 
*   create a new configuration in jenkins portal with 'distservices-central'.
*/

#!groovy
pipeline {
    agent { label "linux" }
    options { 
      //use your gitlab id. ex: oec-gitlab-<project_name>
      gitLabConnection('oec-gitlab-distservices')   
      gitlabCommitStatus(name: 'jenkins')
    }
    tools {
        jdk 'jdk1.8.0_151'
        maven 'maven-3.5.0'
    }
    triggers {
        gitlab(triggerOnPush: true, branchFilterType: "NameBasedFilter",  includeBranchesSpec: "master", excludeBranchesSpec: "")
   
    environment {
   		// Use your own CI credentials id. 
   		// To find this ID, Go to your own OEC project's jenkin's site, Go to -> Credentials and find the ID   		   		
		CI = credentials('repo.openearth.io-distservices-ci') 
		
		//Use your docker Registry name. 
		//ex: '<project_name>.docker.repo.openearth.io' 
		REGISTRY ='<project_name>-docker.repo.openearth.io'
		DOCKER_REPO='distservices-docker.repo.openearth.io' 
		DOCKER_LOCATION='/home/centos/tools/docker/bin'
		DOCKER_COMPOSE_LOCATION = '/usr/local/bin/docker-compose'
		DOCKER_IENERGY_CRED=credentials('distplat-docker-milestone.hub.ienergycloud.io')
        DOCKER_IENERGY='distplat-docker-milestone.hub.ienergycloud.io'
        AWS_ACCESS_KEY_ID=credentials(<configured_key_id>)
        AWS_SECRET_ACCESS_KEY=credentials(<configured_access_key>)
        DPCLI='distservices-docker.repo.openearth.io/distarch/dpcli-<cluster_name>:>dpcli_image_version>
        PARAMETERS="--rm -v /var/run/docker.sock:/var/run/docker.sock\
                         -v $HOME/.docker:/root/.docker\
                         -e AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}\
                         -e AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}\
                         -v \$(pwd):/root/app $DPCLI"
    }

    stages {
        stage('package') {
            steps {
				sh "docker login -u ${DOCKER_IENERGY_CRED_USR} -p ${DOCKER_IENERGY_CRED_PSW} ${DOCKER_IENERGY}"
				withMaven(
						maven: 'maven-3.5.0',
						
						// Log in to your project's jenkins site  "http://<project_name>.ci.openearth.io"
						// Go to Manage Jenkins -> Managed Files
						// Create a config file to access 'distservices-central' and use the file name here.
						mavenSettingsConfig: 'maven-settings-distservicesci',
						mavenLocalRepo: '.m2repo') {
						    sh "ls"
					
					 
					/*Possible parameters for this command:
					*@param 'snapshot.url' - snapshots artifactory url (OPTIONAL)
					*@param 'snapshot.url' - releases artifactory url  (OPTIONAL)
					*@param 'docker.registry' - use project specific docker registry 
					*@param 'docker.repo' - distservices-docker.repo.openearth.io 
					*
					*Note: Below command will default point to dist sevices registry and docker repo.
					*Update the command to use your project specific registry and docker repo.
					*ex: mvn -Ddocker.registry=${REGISTRY} -Ddocker.repo=${DOCKER_REPO} clean install.
					*/
					sh "mvn clean install -Denunciate.include.pattern=com.lgc.dspdm.msp.mainservice.**"
				}
            }
        }
        stage('Deploy') {
            steps {      

				echo "Running deploy.sh script"
				sh "ls"
                                sh "docker login -u ${DOCKER_IENERGY_CRED_USR} -p ${DOCKER_IENERGY_CRED_PSW} ${DOCKER_IENERGY}"
                                // deployment
                                sh """docker run $PARAMETERS docker tag ${REGISTRY}/distarch/dspdm.msp.mainservice:1.0-SNAPSHOT\
                                       ${DOCKER_IENERGY}/distarch/dspdm.msp.mainservice:1.0-SNAPSHOT\
                                       && docker push ${DOCKER_IENERGY}/distarch/dspdm.msp.mainservice:1.0-SNAPSHOT"""
                               sh """ sleep 40s"""
                                dir ('deploy') {
                                    sh "pwd"
                                    sh "ls"
                                    sh """docker run $PARAMETERS helm install mainservice --name=mainservicetest  --set global.env.production=true --tiller-namespace dp-test --namespace=dp-test --wait --timeout 400"""
                                } 
                //-------------------- SONARQUBE INTEGRATION---------------------    
               /*  withMaven(
                    maven: 'maven-3.5.0',
                    mavenSettingsConfig: <maven settings config file name>,
                    mavenLocalRepo: '.m2repo') {
                        sh '''  mvn -Ddocker.repo=${REGISTRY} clean deploy
                            (
                                cd <maven project name ex: com.lgc.dist.core.msp.service>
                                mvn 'sonar:sonar -Dsonar.host.url=http://<project_name>.openearth.io/service/sonarqube/'
                                
                                                                
                                Note: Need to add all maven projects explicitly for which sonar coverage required
                            ) || ( echo 'Sonar Exception')
                        '''
                  }  */ 
            }
           // ------------------AUTOTEST INTEGRATION-----------------------------
          /*  stage('api-test') {
            steps {                
                sh "docker login -u ${DOCKER_IENERGY_CRED_USR} -p ${DOCKER_IENERGY_CRED_PSW} ${DOCKER_IENERGY}"
                dir('autotest/') {
                    sh "sleep 1m"
                    sh "chmod +x autotest.sh"
                    sh """./autotest.sh <your collection.json name> -c <cluster name> \
                            -i <app docker image name>:<app docker image version> \
                            -d ${workspace}/<project's deploy folder path> -t 180000"""
                                       sh """docker run $PARAMETERS helm del --purge mainservicetest --tiller-namespace dp-test"""
                }
            }*/
        }
    }
}
